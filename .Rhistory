box(title = "Comparison Plot Options",
width = 3,
selectInput("x",
"Select Entity 1",
choices = c("Gene", "Haplotype", "Variant", "Disease", "Chemical"),
selected = "Gene"),
selectInput("y",
"Select Entity 2",
choices = c("Gene", "Haplotype", "Variant", "Disease", "Chemical"),
selected = "Disease"),
),
box(title = "Percentage of Association Types Plots", width = 6,
plotOutput("plot", width = "500px", height = "400px")
)
)
)
)
server <- function(input, output, session) {
session$onSessionEnded(stopApp)
output$plot <- renderPlot({
pa <- relations %>%
filter(entity1_type == input$x & entity2_type == input$y) %>%
group_by(association) %>%
summarise(count = n(), .groups = 'drop') %>%
mutate(percentage = (count / sum(count)) * 100)
ggplot(pa, aes(x = "", y = percentage, fill = association)) +
geom_bar(stat = "identity", width = 1) +
coord_polar("y", start = 0) +
labs(title = "Percentage of Association Types between Entities",
fill= "Type of Association") +
scale_fill_brewer(palette = "Paired")+
theme_void()+
geom_text(aes(label = paste0(round(percentage, 1), "%")),  # Adding percentage labels
position = position_stack(vjust = 0.5),             # Centers the labels
color = "white", size = 4)
})
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "PharmGKB Data Analysis"),
dashboardSidebar(disable=T),
dashboardBody(
fluidRow(
box(title = "Comparison Plot Options",
width = 3,
selectInput("x",
"Select Entity 1",
choices = c("Gene", "Haplotype", "Variant", "Disease", "Chemical"),
selected = "Gene"),
selectInput("y",
"Select Entity 2",
choices = c("Gene", "Haplotype", "Variant", "Disease", "Chemical"),
selected = "Disease"),
),
box(title = "Percentage of Association Types Plots", width = 6,
plotOutput("plot", width = "500px", height = "400px")
)
)
)
)
server <- function(input, output, session) {
session$onSessionEnded(stopApp)
output$plot <- renderPlot({
pa <- relations %>%
filter(entity1_type == input$x & entity2_type == input$y) %>%
group_by(association) %>%
summarise(count = n(), .groups = 'drop') %>%
mutate(percentage = (count / sum(count)) * 100)
ggplot(pa, aes(x = "", y = percentage, fill = association)) +
geom_bar(stat = "identity", width = 1) +
coord_polar("y", start = 0) +
labs(fill= "Type of Association") +
scale_fill_brewer(palette = "Paired")+
theme_void()+
geom_text(aes(label = paste0(round(percentage, 1), "%")),  # Adding percentage labels
position = position_stack(vjust = 0.5),             # Centers the labels
color = "white", size = 4)
})
}
shinyApp(ui, server)
library(tidyverse)
library(janitor)
library(dplyr)
library(shiny)
library(shinydashboard)
require(janitor)
relations <- read_tsv("data/relationships.tsv") %>% clean_names()
ui <- dashboardPage(
dashboardHeader(title = "PharmGKB Data Analysis"),
dashboardSidebar(disable=T),
dashboardBody(
fluidRow(
box(title = "Comparison Plot Options",
width = 3,
selectInput("x",
"Select Entity 1",
choices = c("Gene", "Haplotype", "Variant", "Disease", "Chemical"),
selected = "Gene"),
selectInput("y",
"Select Entity 2",
choices = c("Gene", "Haplotype", "Variant", "Disease", "Chemical"),
selected = "Disease"),
),
box(title = "Percentage of Association Types Plots", width = 6,
plotOutput("plot", width = "500px", height = "400px")
)
)
)
)
server <- function(input, output, session) {
session$onSessionEnded(stopApp)
output$plot <- renderPlot({
pa <- relations %>%
filter(entity1_type == input$x & entity2_type == input$y) %>%
group_by(association) %>%
summarise(count = n(), .groups = 'drop') %>%
mutate(percentage = (count / sum(count)) * 100)
ggplot(pa, aes(x = "", y = percentage, fill = association)) +
geom_bar(stat = "identity", width = 1) +
coord_polar("y", start = 0) +
labs(fill= "Type of Association") +
scale_fill_brewer(palette = "Paired")+
theme_void()+
geom_text(aes(label = paste0(round(percentage, 1), "%")),  # Adding percentage labels
position = position_stack(vjust = 0.5),             # Centers the labels
color = "white", size = 4)
})
}
shinyApp(ui, server)
cancer_disease_evidence_counts_v_rs <- cancer_evidence_v %>%
filter(entity1_name == "rs1045642") %>%
count(entity2_name, evidence, sort = TRUE)
ggplot(cancer_disease_evidence_counts_v_rs, aes(x = evidence, y = n, fill = evidence)) +
geom_bar(stat = "identity") +
labs(title = "Cancer-Related Diseases Vs. Evidence Types",
x = "Disease",
y = "Number of Associations",
fill = "Evidence Type") +
scale_fill_brewer(palette = "Paired")+
theme_light()
# Basically different types of Lymphoma are clinical+variant associated, and carcinoma is variant associated.
ggplot(cancer_disease_evidence_counts, aes(x = evidence, y = n, fill = evidence)) +
geom_bar(stat = "identity") +
labs(title = "Cancer-Related Diseases Vs. Evidence Types",
x = "Disease",
y = "Number of Associations",
fill = "Evidence Type") +
theme_minimal()
# Basically different types of Lymphoma are clinical+variant associated, and carcinoma is variant associated.
ui <- dashboardPage(
dashboardHeader(title = "Cancer-related Diseases Analysis"),
dashboardSidebar(disable=T),
dashboardBody(
fluidRow(
box(title = "Choose type of gene:",
width = 3,
selectInput("x",
"Select Entity 1",
choices = c("cancer_disease_evidence_counts_v_rs", "cancer_disease_evidence_counts"),
selected = "Gene: ABCB1")
),
box(title = "Percentage of Association Types Plots", width = 6,
plotOutput("plot", width = "500px", height = "400px")
)
)
)
)
server <- function(input, output, session) {
session$onSessionEnded(stopApp)
output$plot <- renderPlot({
ggplot(input$x, aes(x = evidence, y = n, fill = evidence)) +
geom_bar(stat = "identity") +
labs(title = "Cancer-Related Diseases Vs. Evidence Types",
x = "Disease",
y = "Number of Associations",
fill = "Evidence Type") +
scale_fill_brewer(palette = "Paired")+
theme_light()
})
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "Cancer-related Diseases Analysis"),
dashboardSidebar(disable=T),
dashboardBody(
fluidRow(
box(title = "Choose type of gene:",
width = 3,
selectInput("x",
"Select Entity 1",
choices = c("cancer_disease_evidence_counts_v_rs", "cancer_disease_evidence_counts"),
selected = "Gene: ABCB1")
),
box(title = "Percentage of Association Types Plots", width = 6,
plotOutput("plot", width = "500px", height = "400px")
)
)
)
)
server <- function(input, output, session) {
session$onSessionEnded(stopApp)
output$plot <- renderPlot({
ggplot(input$x, aes(x = evidence, y = n, fill = evidence)) +
geom_bar() +
labs(title = "Cancer-Related Diseases Vs. Evidence Types",
x = "Disease",
y = "Number of Associations",
fill = "Evidence Type") +
scale_fill_brewer(palette = "Paired")+
theme_light()
})
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "Cancer-related Diseases Analysis"),
dashboardSidebar(disable=T),
dashboardBody(
fluidRow(
box(title = "Choose type of gene:",
width = 3,
selectInput("x",
"Select Entity 1",
choices = c("cancer_disease_evidence_counts_v_rs", "cancer_disease_evidence_counts"),
selected = "cancer_disease_evidence_counts_v_rs")
),
box(title = "Percentage of Association Types Plots", width = 6,
plotOutput("plot", width = "500px", height = "400px")
)
)
)
)
server <- function(input, output, session) {
session$onSessionEnded(stopApp)
output$plot <- renderPlot({
ggplot(input$x, aes(x = evidence, y = n, fill = evidence)) +
geom_bar() +
labs(title = "Cancer-Related Diseases Vs. Evidence Types",
x = "Disease",
y = "Number of Associations",
fill = "Evidence Type") +
scale_fill_brewer(palette = "Paired")+
theme_light()
})
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "Cancer-related Diseases Analysis"),
dashboardSidebar(disable = TRUE),
dashboardBody(
fluidRow(
box(
title = "Choose type of gene:",
width = 3,
selectInput("x",
"Select Entity 1",
choices = c("cancer_disease_evidence_counts_v_rs",
"cancer_disease_evidence_counts"),
selected = "cancer_disease_evidence_counts_v_rs")
),
box(
title = "Percentage of Association Types Plots",
width = 6,
plotOutput("plot", width = "500px", height = "400px")
)
)
)
)
server <- function(input, output, session) {
session$onSessionEnded(stopApp)
output$plot <- renderPlot({
# Choose the data frame based on the selected input value
data_to_plot <- switch(input$x,
"cancer_disease_evidence_counts_v_rs" = cancer_disease_evidence_counts_v_rs,
"cancer_disease_evidence_counts" = cancer_disease_evidence_counts)
# Check if the dataset is available and has rows
if(is.null(data_to_plot) || nrow(data_to_plot) == 0) {
plot.new()
title("No data available for the selected dataset.")
} else {
ggplot(data_to_plot, aes(x = evidence, y = n, fill = evidence)) +
geom_bar(stat = "identity") +
labs(title = "Cancer-Related Diseases Vs. Evidence Types",
x = "Evidence",
y = "Number of Associations",
fill = "Evidence Type") +
scale_fill_brewer(palette = "Paired") +
theme_light()
}
})
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "Cancer-related Diseases Analysis"),
dashboardSidebar(disable = TRUE),
dashboardBody(
fluidRow(
box(
title = "Choose type of gene:",
width = 3,
selectInput("x",
"Select Entity 1",
choices = c("cancer_disease_evidence_counts_v_rs",
"cancer_disease_evidence_counts"),
selected = "cancer_disease_evidence_counts_v_rs")
),
box(
title = "Percentage of Association Types Plots",
width = 6,
plotOutput("plot", width = "500px", height = "400px")
)
)
)
)
server <- function(input, output, session) {
session$onSessionEnded(stopApp)
output$plot <- renderPlot({
# Choose the data frame based on the selected input value
data_to_plot <- switch(input$x,
"cancer_disease_evidence_counts_v_rs" = cancer_disease_evidence_counts_v_rs,
"cancer_disease_evidence_counts" = cancer_disease_evidence_counts)
ggplot(data_to_plot, aes(x = evidence, y = n, fill = evidence)) +
geom_bar(stat = "identity") +
labs(title = "Cancer-Related Diseases Vs. Evidence Types",
x = "Evidence",
y = "Number of Associations",
fill = "Evidence Type") +
scale_fill_brewer(palette = "Paired") +
theme_light()
})
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "Combined Analysis"),
dashboardSidebar(
sidebarMenu(
menuItem("PharmGKB Analysis", tabName = "pharm", icon = icon("chart-pie")),
menuItem("Cancer Diseases Analysis", tabName = "cancer", icon = icon("chart-bar"))
)
),
dashboardBody(
tabItems(
# PharmGKB Analysis Tab
tabItem(tabName = "pharm",
fluidRow(
box(
title = "Comparison Plot Options",
width = 3,
selectInput("x1",
"Select Entity 1",
choices = c("Gene", "Haplotype", "Variant", "Disease", "Chemical"),
selected = "Gene"),
selectInput("y1",
"Select Entity 2",
choices = c("Gene", "Haplotype", "Variant", "Disease", "Chemical"),
selected = "Disease")
),
box(
title = "Percentage of Association Types Plots",
width = 6,
plotOutput("plot1", width = "500px", height = "400px")
)
)
),
# Cancer-related Diseases Analysis Tab
tabItem(tabName = "cancer",
fluidRow(
box(
title = "Choose type of gene:",
width = 3,
selectInput("x2",
"Select Entity 1",
choices = c("cancer_disease_evidence_counts_v_rs",
"cancer_disease_evidence_counts"),
selected = "cancer_disease_evidence_counts_v_rs")
),
box(
title = "Percentage of Association Types Plots",
width = 6,
plotOutput("plot2", width = "500px", height = "400px")
)
)
)
)
)
)
# Combined server function
server <- function(input, output, session) {
session$onSessionEnded(stopApp)
# PharmGKB Analysis Plot
output$plot1 <- renderPlot({
pa <- relations %>%
filter(entity1_type == input$x1 & entity2_type == input$y1) %>%
group_by(association) %>%
summarise(count = n(), .groups = 'drop') %>%
mutate(percentage = (count / sum(count)) * 100)
ggplot(pa, aes(x = "", y = percentage, fill = association)) +
geom_bar(stat = "identity", width = 1) +
coord_polar("y", start = 0) +
labs(fill = "Type of Association") +
scale_fill_brewer(palette = "Paired") +
theme_void() +
geom_text(aes(label = paste0(round(percentage, 1), "%")),
position = position_stack(vjust = 0.5),
color = "white", size = 4)
})
# Cancer-related Diseases Analysis Plot
output$plot2 <- renderPlot({
data_to_plot <- switch(input$x2,
"cancer_disease_evidence_counts_v_rs" = cancer_disease_evidence_counts_v_rs,
"cancer_disease_evidence_counts" = cancer_disease_evidence_counts)
ggplot(data_to_plot, aes(x = evidence, y = n, fill = evidence)) +
geom_bar(stat = "identity") +
labs(title = "Cancer-Related Diseases Vs. Evidence Types",
x = "Evidence",
y = "Number of Associations",
fill = "Evidence Type") +
scale_fill_brewer(palette = "Paired") +
theme_light()
})
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "Combined Analysis"),
dashboardSidebar(
sidebarMenu(
menuItem("PharmGKB Analysis", tabName = "pharm", icon = icon("chart-pie")),
menuItem("Cancer Diseases Analysis", tabName = "cancer", icon = icon("chart-bar"))
)
),
dashboardBody(
tabItems(
# PharmGKB Analysis Tab
tabItem(tabName = "pharm",
fluidRow(
box(
title = "Comparison Plot Options",
width = 3,
selectInput("x1",
"Select Entity 1",
choices = c("Gene", "Haplotype", "Variant", "Disease", "Chemical"),
selected = "Gene"),
selectInput("y1",
"Select Entity 2",
choices = c("Gene", "Haplotype", "Variant", "Disease", "Chemical"),
selected = "Disease")
),
box(
title = "Percentage of Association Types Plots",
width = 6,
plotOutput("plot1", width = "500px", height = "400px")
)
)
),
# Cancer-related Diseases Analysis Tab
tabItem(tabName = "cancer",
fluidRow(
box(
title = "Choose type of gene:",
width = 3,
selectInput("x2",
"Select Entity 1",
choices = c("cancer_disease_evidence_counts_v_rs",
"cancer_disease_evidence_counts"),
selected = "cancer_disease_evidence_counts_v_rs")
),
box(
title = "Percentage of Association Types Plots",
width = 6,
plotOutput("plot2", width = "500px", height = "400px")
)
)
)
)
)
)
# Combined server function
server <- function(input, output, session) {
session$onSessionEnded(stopApp)
# PharmGKB Analysis Plot
output$plot1 <- renderPlot({
pa <- relations %>%
filter(entity1_type == input$x1 & entity2_type == input$y1) %>%
group_by(association) %>%
summarise(count = n(), .groups = 'drop') %>%
mutate(percentage = (count / sum(count)) * 100)
ggplot(pa, aes(x = "", y = percentage, fill = association)) +
geom_bar(stat = "identity", width = 1) +
coord_polar("y", start = 0) +
labs(fill = "Type of Association") +
scale_fill_brewer(palette = "Paired") +
theme_void() +
geom_text(aes(label = paste0(round(percentage, 1), "%")),
position = position_stack(vjust = 0.5),
color = "white", size = 4)
})
# Cancer-related Diseases Analysis Plot
output$plot2 <- renderPlot({
data_to_plot <- switch(input$x2,
"cancer_disease_evidence_counts_v_rs" = cancer_disease_evidence_counts_v_rs,
"cancer_disease_evidence_counts" = cancer_disease_evidence_counts)
ggplot(data_to_plot, aes(x = evidence, y = n, fill = evidence)) +
geom_bar(stat = "identity") +
labs(title = "Cancer-Related Diseases Vs. Evidence Types",
x = "Evidence",
y = "Number of Associations",
fill = "Evidence Type") +
scale_fill_brewer(palette = "Paired") +
theme_light()
})
}
shinyApp(ui, server)
View(relations)
